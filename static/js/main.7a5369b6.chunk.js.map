{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchBox/searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","Cardlist","map","monster","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","this","filteredmonsters","filter","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7a5369b6.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styling.css'\r\n\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}/>\r\n        <h3>{props.monsters.name}</h3>\r\n        <p>{props.monsters.email}</p>\r\n    </div>\r\n)","import React  from 'react'\r\nimport './card-list.styling.css'\r\nimport {Card} from '../card/card.component'\r\n\r\n\r\n\r\n\r\nexport const Cardlist = (props) => {\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n          props.monsters.map(monster => ( \r\n            \r\n            <Card key={monster.id} monsters= {monster}/>\r\n          ) )\r\n        }\r\n        \r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport './searchbox-style.css'\r\n\r\n\r\nexport const SearchBox = ({placeholder,handleChange})=>\r\n    <input \r\n        className=\"search\"    \r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    />\r\n","import React ,{Component} from 'react';\nimport {Cardlist} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/searchBox/searchbox.jsx'\nimport './App.css';\n//import data from './data.json'\n\n\n\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state= {\n      searchField:'',\n      monsters: [\n   \n    \n    \n    ]\n    };\n  }\n\n  componentDidMount() {\n       fetch('https://jsonplaceholder.typicode.com/users')\n       .then(response => response.json())\n       .then(user => this.setState({monsters:user}))\n      //this.setState({monsters : data});\n\n  }\n\n  handleChange = e => {\n    this.setState({searchField:e.target.value})\n  }\n    \n  \n  render(){\n    \n        const {monsters,searchField}=this.state;\n        const filteredmonsters=monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase()) || monster.email.toLowerCase().includes(searchField.toLowerCase()) );\n \n    return (\n      <div className=\"App\">\n        <h1>Monsters-Rolodex</h1>\n\n        <SearchBox placeholder=\"search monster\" handleChange={this.handleChange}/>\n       \n        <Cardlist monsters={filteredmonsters}/>\n    </div>\n  );\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}